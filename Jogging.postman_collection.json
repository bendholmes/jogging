{
	"info": {
		"_postman_id": "33f045b6-6ed9-4e88-b7c5-3429092ec673",
		"name": "Jogging",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "569c7887-b821-4379-9f92-c4235398b743",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response must be created\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"response must have expected fields\", function () {",
							"    var user = pm.response.json();",
							"    pm.expect(user).to.have.property('username');",
							"    pm.expect(user).to.have.property('role');",
							"});"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "e4e5fa82-89fe-4112-9e30-ac82484206b0",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"username\", \"admin-user\")",
							"pm.environment.set(\"password\", \"admin-password\")"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\": \"{{username}}\",\n\t\"password\": \"{{password}}\",\n\t\"is_superuser\": true,\n\t\"is_staff\": true\n}"
				},
				"url": {
					"raw": "{{url}}/api/user/",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "52379548-3ade-4779-a053-dfb202839d14",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"csrftoken\", decodeURIComponent(pm.cookies.get(\"csrftoken\")))",
							"",
							"pm.test(\"response must be ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"response must have expected fields\", function () {",
							"    var user = pm.response.json();",
							"    pm.expect(user).to.have.property('username');",
							"    pm.expect(user).to.have.property('role');",
							"});",
							"",
							"",
							"// If we have specified an action after login, set that as the next one",
							"if (pm.environment.get(\"requestAfterLogin\")) {",
							"    postman.setNextRequest(pm.environment.get(\"requestAfterLogin\"));",
							"}",
							"",
							"pm.environment.set(\"logged-in-user-id\", pm.response.json().id);"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\": \"{{username}}\",\n\t\"password\": \"{{password}}\"\n}"
				},
				"url": {
					"raw": "{{url}}/api/login/",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"login",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Jog",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c6794873-9f2e-49e8-ad47-f8af69053d3c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9e8b6342-bc05-4bae-8388-1034371c0dc9",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"last-created-jog\", pm.response.json().id);",
							"",
							"pm.test(\"response must be created\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"response must have expected fields\", function () {",
							"    var jog = pm.response.json();",
							"    pm.expect(jog).to.have.property('id');",
							"    pm.expect(jog.owner).to.equal(pm.environment.get('username'));",
							"    pm.expect(jog.date).to.equal('3000-10-20T12:31:00');",
							"    pm.expect(jog.distance).to.equal(100);",
							"    pm.expect(jog.time).to.equal('00:34:12');    ",
							"    pm.expect(jog.average_speed).to.equal(175.44);   ",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"date\": \"3000-10-20 12:31\",\n  \"distance\": 100,\n  \"time\": \"00:34:12\",\n  \"owner\": \"{{username}}\"\n}"
				},
				"url": {
					"raw": "{{url}}/api/jog/",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"jog",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "List Jogs",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c6794873-9f2e-49e8-ad47-f8af69053d3c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "74ddacf5-9299-4985-89a5-8f548bb799ab",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response must be ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"response must have expected fields\", function () {",
							"    var firstJog = pm.response.json()[0];",
							"    pm.expect(firstJog).to.have.property('id');",
							"    pm.expect(firstJog).to.have.property('owner');",
							"    pm.expect(firstJog).to.have.property('date');",
							"    pm.expect(firstJog).to.have.property('distance');",
							"    pm.expect(firstJog).to.have.property('time');",
							"    pm.expect(firstJog).to.have.property('average_speed');",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/api/jog/",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"jog",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "List Jogs Between Dates",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c6794873-9f2e-49e8-ad47-f8af69053d3c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "74ddacf5-9299-4985-89a5-8f548bb799ab",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response must be ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"response must have expected fields\", function () {",
							"    var firstJog = pm.response.json()[0];",
							"    pm.expect(firstJog).to.have.property('id');",
							"    pm.expect(firstJog).to.have.property('owner');",
							"    pm.expect(firstJog).to.have.property('date');",
							"    pm.expect(firstJog).to.have.property('distance');",
							"    pm.expect(firstJog).to.have.property('time');",
							"    pm.expect(firstJog).to.have.property('average_speed');",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/api/jog/?date_0=2000-01-01&date_1=4000-01-01",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"jog",
						""
					],
					"query": [
						{
							"key": "date_0",
							"value": "2000-01-01"
						},
						{
							"key": "date_1",
							"value": "4000-01-01"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Jog",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c6794873-9f2e-49e8-ad47-f8af69053d3c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "14c87b5c-3e0f-452d-a565-4603e003926c",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response must be ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"response must have expected fields\", function () {",
							"    var jog = pm.response.json();",
							"    pm.expect(jog).to.have.property('id');",
							"    pm.expect(jog.owner).to.equal(pm.environment.get('username'));",
							"    pm.expect(jog.date).to.equal('3000-10-20T12:31:00');",
							"    pm.expect(jog.distance).to.equal(100);",
							"    pm.expect(jog.time).to.equal('00:34:12');    ",
							"    pm.expect(jog.average_speed).to.equal(175.44);   ",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/api/jog/{{last-created-jog}}/",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"jog",
						"{{last-created-jog}}",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Jog",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c6794873-9f2e-49e8-ad47-f8af69053d3c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "577550df-b582-4f45-8d0f-5b94774d7825",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"last-created-jog\", pm.response.json().id);",
							"",
							"pm.test(\"response must be ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"response must have expected fields\", function () {",
							"    var jog = pm.response.json();",
							"    pm.expect(jog).to.have.property('id');",
							"    pm.expect(jog.owner).to.equal(pm.environment.get('username'));",
							"    pm.expect(jog.date).to.equal('4000-10-20T12:31:00');",
							"    pm.expect(jog.distance).to.equal(200);",
							"    pm.expect(jog.time).to.equal('00:44:12');    ",
							"    pm.expect(jog.average_speed).to.equal(271.49);   ",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"date\": \"4000-10-20 12:31\",\n\t\"distance\": 200,\n\t\"time\": \"00:44:12\"\n}"
				},
				"url": {
					"raw": "{{url}}/api/jog/{{last-created-jog}}/",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"jog",
						"{{last-created-jog}}",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Reports",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c6794873-9f2e-49e8-ad47-f8af69053d3c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "72e5a71f-51c0-46b4-82ae-2d97cea34567",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response must be ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"response must have expected fields\", function () {",
							"    var firstReport = pm.response.json()[0];",
							"    pm.expect(firstReport).to.have.property('week');",
							"    pm.expect(firstReport).to.have.property('average_distance');",
							"    pm.expect(firstReport).to.have.property('average_speed');",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/api/report/",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"report",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Jog",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c6794873-9f2e-49e8-ad47-f8af69053d3c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "34ed0c61-4bf3-41f6-a2c3-e5c6cd2e9454",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response must be no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/api/jog/{{last-created-jog}}/",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"jog",
						"{{last-created-jog}}",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c6794873-9f2e-49e8-ad47-f8af69053d3c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9635d0f3-3540-465d-b8c0-080f27d09146",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response must be ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"// For the test runner, we want to login again and then delete the user afterwards",
							"postman.setNextRequest(\"Login\");",
							"pm.environment.set(\"requestAfterLogin\", \"List Users\")"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/api/logout/",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"logout",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "List Users",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c6794873-9f2e-49e8-ad47-f8af69053d3c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "bbb07d77-b306-4218-8040-39fc68d0bb3b",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response must be ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"response must have expected fields\", function () {",
							"    var firstUser = pm.response.json()[0];",
							"    pm.expect(firstUser).to.have.property('username');",
							"    pm.expect(firstUser).to.have.property('role');",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/api/user/",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c6794873-9f2e-49e8-ad47-f8af69053d3c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "dd88fd99-36e8-457f-a26a-37cec727dd1e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response must be ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"response must have expected fields\", function () {",
							"    var user = pm.response.json();",
							"    pm.expect(user.username).to.equal(pm.environment.get(\"username\"));",
							"    pm.expect(user.role).to.equal(\"admin\");",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/api/user/{{logged-in-user-id}}/",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"user",
						"{{logged-in-user-id}}",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c6794873-9f2e-49e8-ad47-f8af69053d3c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9f8423e5-ec92-4b95-855e-b229bc71682e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response must be ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"response must have expected fields\", function () {",
							"    var user = pm.response.json();",
							"    pm.expect(user.username).to.have.equal('patched-user');",
							"    pm.expect(user).to.have.property('role');",
							"});",
							"",
							"// For the test runner, we want to login again and then delete the user afterwards",
							"if (pm.response.code === 200) {",
							"    postman.setNextRequest(\"Login\");",
							"    pm.environment.set(\"username\", \"patched-user\")",
							"    pm.environment.set(\"password\", \"patched-pass\")",
							"    pm.environment.set(\"requestAfterLogin\", \"Delete User\")",
							"}"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\": \"patched-user\",\n\t\"password\": \"patched-pass\"\n}"
				},
				"url": {
					"raw": "{{url}}/api/user/{{logged-in-user-id}}/",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"user",
						"{{logged-in-user-id}}",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c6794873-9f2e-49e8-ad47-f8af69053d3c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7d8a31ea-707f-4474-8617-50aada453d84",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response must be no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"pm.environment.set(\"requestAfterLogin\", \"Create Jog\")"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "X-CSRFToken",
						"value": "{{csrftoken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/api/user/{{logged-in-user-id}}/",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"user",
						"{{logged-in-user-id}}",
						""
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "e4e17e08-e9d9-4679-a7f6-f59cd63c2301",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "d5c75d26-7a06-4720-8d4f-4bbd1ca3791f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}